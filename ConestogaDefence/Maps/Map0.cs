using Microsoft.Xna.Framework;

namespace ConestogaDefence.Maps
{
    public class Map0 : Map
    {
        private PathFinder mPathFinder;

        public Map0()
        {
            Layout = new int[,]
                {{ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3},
                { -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3},
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3},
                { -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, -1, -1, -1, -1, -1, -1},
                { -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, -1, -1, -1, -1, -1, -1},
                { -2 ,-2, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2},
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2},
                { -1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -2, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -3},
                { -1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -2, -1, -1, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -1, -1, -3},
                { -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -1, -1, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -1, -1, -3},
                { -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -3, -1, -1, -2, -2, -1, -1, -2, -2, -1, -1, -2, -2, -3, -1, -1, -1, -1, -1, -3},
                { -1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -3, -3, -3},
                { -1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -1, -1, -1, -3, -3, -3, -3},
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -3, -3, -3},
                { -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3},
                { -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3},
                { -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3}};

            EnemySpawningPoint = new Vector2(0, 320);
            mPathFinder = new PathFinder(this);
            Waypoints = mPathFinder.FindPath(new Point(0, 5), new Point(29, 5));
        }
    }
}
